#include <iostream>
#include <string.h>

using namespace std;
int matrix[31][31];
int visit[31][31];
//queen
int q[3000][3];
int fisrt, last;
int x, y, z;
void add(int x, int y){
	q[last][0] = x;
	q[last][1] = y;
	q[last][2] = z + 1;
	last++;
}
void pop(){
	x = q[fisrt][0];
	y = q[fisrt][1];
	z = q[fisrt][2];
	fisrt++;
}

void truyVet(int sx,int sy, int dx,int dy, int n){
//	for(int i=1 ; i<=n; i++){
//		for(int j=1; j<=n; j++){
//			cout<<visit[i][j]<<"  ";
//		}
//		cout<<"\n";
//	}
	
	int x = sx , y= sy;
	cout<<visit[x][y]<<"\n";
	cout<<x<<" "<<y<<"\n";
	
	while(1){
		if(x == dx && y==dy ){
			break;
		}
		if(x+1 <=n && visit[x+1][y] == visit[x][y] - 1){
			x++;
			cout<<x<<" "<<y<<"\n";
		}
		else if(x-1>=1 && visit[x-1][y] == visit[x][y] - 1){
			x--;
			cout<<x<<" "<<y<<"\n";
		}
		else if(y+1<=n && visit[x][y+1] == visit[x][y] - 1){
			y++;
			cout<<x<<" "<<y<<"\n";
		}
		else if(y-1>=1 && visit[x][y-1] == visit[x][y] - 1){
			y--;
			cout<<x<<" "<<y<<"\n";
		}
	}	
}

void BFS(int sx,int sy, int dx,int dy, int n){
	//initial
	matrix[sx][sy] = 0;
	fisrt = 0;
	last = 0;
	z = 0;
	memset(visit, 0, sizeof(visit));
	
	add(dx,dy);
	visit[dx][dy] = 1;
	bool timThay =false;
	
	while(fisrt!=last){
		pop();
		//kiem di den dich
		if(x== sx && y==sy){
			timThay = true;
			break;
		}
		if( x + 1 <= n && matrix[x+1][y] == 0  &&visit[x+1][y] == 0 ){
			add(x+1,y);
			visit[x+1][y] = z+1;
		}
		if( x - 1 >= 1 && matrix[x-1][y] == 0  &&visit[x-1][y] == 0 ){
			visit[x-1][y] = z+1;
			add(x-1,y);
		}
		if( y + 1 <=n && matrix[x][y+1] == 0  &&visit[x][y+1] == 0 ){
			visit[x][y+1] = z+1;
			add(x,y+1);
		}
		if( y - 1 >=1 && matrix[x][y-1] == 0  &&visit[x][y-1] == 0 ){
			visit[x][y-1] = z+1;
			add(x,y-1);
		}
	}
	
	if(timThay){
//		cout<<"YES\n";
		truyVet(sx,sy,dx,dy,n);
	}else{
//		cout<<"NO\n";
		cout<<"0\n";
	}	
}

int main(){
	//input
	int n; cin>>n;
	int sx, sy; cin>>sx>>sy;
	int dx, dy; cin>>dx>>dy;
	for(int i=1 ; i<=n; i++){
		for(int j=1; j<=n; j++){
			cin>>matrix[i][j];
		}
	}
	//handle
	BFS(sx,sy,dx,dy,n);
	
	return 0;
}
    
